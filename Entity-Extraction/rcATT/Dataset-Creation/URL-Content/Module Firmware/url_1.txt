Module Firmware |Module Firmware| |Technique| |ID||T0839| |Tactic||Persistence, Impair Process Control| |Data Sources||Firmware: Firmware Modification, Network Traffic: Network Traffic Content, Network Traffic: Network Traffic Flow| |Asset||Field Controller/RTU/PLC/IED, Safety Instrumented System/Protection Relay| Description Adversaries may install malicious or vulnerable firmware onto modular hardware devices. Control system devices often contain modular hardware devices. These devices may have their own set of firmware that is separate from the firmware of the main control system equipment. This technique is similar to System Firmware, but is conducted on other system components that may not have the same capabilities or level of integrity checking. Although it results in a device re-image, malicious device firmware may provide persistent access to remaining devices.1 An easy point of access for an adversary is the Ethernet card, which may have its own CPU, RAM, and operating system. The adversary may attack and likely exploit the computer on an Ethernet card. Exploitation of the Ethernet card computer may enable the adversary to accomplish additional attacks, such as the following:1 - Delayed Attack - The adversary may stage an attack in advance and choose when to launch it, such as at a particularly damaging time. - Brick the Ethernet Card - Malicious firmware may be programmed to result in an Ethernet card failure, requiring a factory return. - "Random" Attack or Failure - The adversary may load malicious firmware onto multiple field devices. Execution of an attack and the time it occurs is generated by a pseudo-random number generator. - A Field Device Worm - The adversary may choose to identify all field devices of the same model, with the end goal of performing a device-wide compromise. - Attack Other Cards on the Field Device - Although it is not the most important module in a field device, the Ethernet card is most accessible to the adversary and malware. Compromise of the Ethernet card may provide a more direct route to compromising other modules, such as the CPU module. Mitigations - Human User Authentication - Devices that allow remote management of firmware should require authentication before allowing any changes. The authentication mechanisms should also support Account Use Policies, Password Policies, and User Account Management. - Communication Authenticity - Protocols used for device management should authenticate all network messages to prevent unauthorized system changes. - Network Allowlists - Use host-based allowlists to prevent devices from accepting connections from unauthorized systems. For example, allowlists can be used to ensure devices can only connect with master stations or known management/engineering workstations.2 - Encrypt Network Traffic - The encryption of firmware should be considered to prevent adversaries from identifying possible vulnerabilities within the firmware. - Access Management - All devices or systems changes, including all administrative functions, should require authentication. Consider using access management technologies to enforce authorization on all management interface access attempts, especially when the device does not inherently provide strong authentication and authorization functions. - Software Process and Device Authentication - Authenticate connections from software and devices to prevent unauthorized systems from accessing protected management functions. - Boot Integrity - Check the integrity of the existing BIOS or EFI to determine if it is vulnerable to modification. Use Trusted Platform Module technology.3 Move system's root of trust to hardware to prevent tampering with the SPI flash memory.4 Technologies such as Intel Boot Guard can assist with this.5 - Code Signing - Devices should verify that firmware has been properly signed by the vendor before allowing installation. - Encrypt Sensitive Information - The encryption of firmware should be considered to prevent adversaries from identifying possible vulnerabilities within the firmware. - Network Segmentation - Segment operational network and systems to restrict access to critical system functions to predetermined management systems.2 - Filter Network Traffic - Filter for protocols and payloads associated with firmware activation or updating activity. - Audit - Perform integrity checks of firmware before uploading it on a device. Utilize cryptographic hashes to verify the firmware has not been tampered with by comparing it to a trusted hash of the firmware. This could be from trusted data sources (e.g., vendor site) or through a third-party verification service. References - a b Daniel Peck, Dale Peterson. (2009, January 28). Leveraging Ethernet Card Vulnerabilities in Field Devices. Retrieved December 19, 2017. - a b Department of Homeland Security. (2016, September). Retrieved September 25, 2020. - ^ N/A. (n.d.). Trusted Platform Module (TPM) Summary. Retrieved September 25, 2020. - ^ ESET Research Whitepapers. (2018, September). LOJAX First UEFI rootkit found in the wild, courtesy of the Sednit group. Retrieved September 25, 2020. - ^ Intel. (n.d.). Intel Hardware-based Security Technologies for Intelligent Retail Devices. Retrieved September 25, 2020.