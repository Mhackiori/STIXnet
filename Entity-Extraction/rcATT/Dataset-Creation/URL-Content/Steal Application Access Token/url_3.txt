Microsoft identity platform and OAuth 2.0 authorization code flow The OAuth 2.0 authorization code grant can be used in apps that are installed on a device to gain access to protected resources, such as web APIs. Using the Microsoft identity platform implementation of OAuth 2.0 and Open ID Connect (OIDC), you can add sign in and API access to your mobile and desktop apps. This article describes how to program directly against the protocol in your application using any language. When possible, we recommend you use the supported Microsoft Authentication Libraries (MSAL) to acquire tokens and call secured web APIs. For more information, look at sample apps that use MSAL. The OAuth 2.0 authorization code flow is described in section 4.1 of the OAuth 2.0 specification. With OIDC, this flow does authentication and authorization for most app types. These types include single page apps, web apps, and natively installed apps. The flow enables apps to securely acquire an access_token that can be used to access resources secured by the Microsoft identity platform. Apps can refresh tokens to get other access tokens and ID tokens for the signed in user. Protocol diagram This diagram provides a high-level overview of the authentication flow for an application: Redirect URI setup required for single-page apps The authorization code flow for single page applications requires additional setup. Follow the instructions for creating your single-page application to correctly mark your redirect URI as enabled for Cross-Origin Resource Sharing (CORS). To update an existing redirect URI to enable CORS, open the manifest editor and set the type field for your redirect URI to spa in the replyUrlsWithType section. Or, you can select the redirect URI in Authentication > Web and select URIs to migrate to using the authorization code flow. The spa redirect type is backwards compatible with the implicit flow. Apps currently using the implicit flow to get tokens can move to the spa redirect URI type without issues and continue using the implicit flow. If you attempt to use the authorization code flow without setting up CORS for your redirect URI, you will see this error in the console: access to XMLHttpRequest at 'https://login.microsoftonline.com/common/v2.0/oauth2/token' from origin 'yourApp.com' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. If so, visit your app registration and update the redirect URI for your app to use the spa type. Applications can't use a spa redirect URI with non-SPA flows, for example, native applications or client credential flows. To ensure security and best practices, the Microsoft identity platform returns an error if you attempt to use a spa redirect URI without an Origin header. Similarly, the Microsoft identity platform also prevents the use of client credentials in all flows in the presence of an Origin header, to ensure that secrets aren't used from within the browser. Request an authorization code The authorization code flow begins with the client directing the user to the /authorize endpoint. In this request, the client requests the openid, offline_access, and https://graph.microsoft.com/mail.read permissions from the user. Some permissions are admin-restricted, for example, writing data to an organization's directory by using Directory.ReadWrite.All. If your application requests access to one of these permissions from an organizational user, the user receives an error message that says they're not authorized to consent to your app's permissions. To request access to admin-restricted scopes, you should request them directly from a Global Administrator. For more information, see Admin-restricted permissions. // Line breaks for legibility only https://login.microsoftonline.com/{tenant}/oauth2/v2.0/authorize? client_id=6731de76-14a6-49ae-97bc-6eba6914391e &response_type=code &redirect_uri=http%3A%2F%2Flocalhost%2Fmyapp%2F &response_mode=query &scope=https%3A%2F%2Fgraph.microsoft.com%2Fmail.read%20api%3A%2F%2F &state=12345 &code_challenge=YTFjNjI1OWYzMzA3MTI4ZDY2Njg5M2RkNmVjNDE5YmEyZGRhOGYyM2IzNjdmZWFhMTQ1ODg3NDcxY2Nl &code_challenge_method=S256 Tip Select the link below to execute this request! After signing in, your browser should be redirected to http://localhost/myapp/ with a code in the address bar. https://login.microsoftonline.com/common/oauth2/v2.0/authorize... |Parameter||Required/optional||Description| |required||The | |required||The Application (client) ID that the Azure portal â€“ App registrations experience assigned to your app.| |required||Must include | |required||The | |required||A space-separated list of scopes that you want the user to consent to. For the | |recommended||Specifies how the identity platform should return the requested token to your app. | Supported values: - - - |recommended||A value included in the request that is also returned in the token response. It can be a string of any content that you wish. A randomly generated unique value is typically used for preventing cross-site request forgery attacks. The value can also encode information about the user's state in the app before the authentication request occurred. For instance, it could encode the page or view they were on.| |optional||Indicates the type of user interaction that is required. Valid values are | - - - - |optional||You can use this parameter to pre-fill the username and email address field of the sign-in page for the user. Apps can use this parameter during reauthentication, after already extracting the | |optional||If included, the app skips the email-based discovery process that user goes through on the sign-in page, leading to a slightly more streamlined user experience. For example, sending them to their federated identity provider. Apps can use this parameter during reauthentication, by extracting the | |recommended / required||Used to secure authorization code grants by using Proof Key for Code Exchange (PKCE). Required if | |recommended / required||The method used to encode the | If excluded, At this point, the user is asked to enter their credentials and complete the authentication. The Microsoft identity platform also ensures that the user has consented to the permissions indicated in the scope query parameter. If the user hasn't consented to any of those permissions, it asks the user to consent to the required permissions. For more information, see Permissions and consent in the Microsoft identity platform. Once the user authenticates and grants consent, the Microsoft identity platform returns a response to your app at the indicated redirect_uri, using the method specified in the response_mode parameter. Successful response This example shows a successful response using response_mode=query: GET http://localhost? code=AwABAAAAvPM1KaPlrEqdFSBzjqfTGBCmLdgfSTLEMPGYuNHSUYBrq... &state=12345 |Parameter||Description| |The | |If a | You can also receive an ID token if you request one and have the implicit grant enabled in your application registration. This behavior is sometimes referred to as the hybrid flow. It's used by frameworks like ASP.NET. Error response Error responses may also be sent to the redirect_uri so the app can handle them appropriately: GET http://localhost? error=access_denied &error_description=the+user+canceled+the+authentication |Parameter||Description| |An error code string that can be used to classify types of errors, and to react to errors. This part of the error is provided so that the app can react appropriately to the error, but does not explain in depth why an error occurred.| |A specific error message that can help a developer identify the cause of an authentication error. This part of the error contains most of the useful information about why the error occurred.| Error codes for authorization endpoint errors The following table describes the various error codes that can be returned in the error parameter of the error response. |Error Code||Description||Client Action| |Protocol error, such as a missing required parameter.||Fix and resubmit the request. This error is a development error typically caught during initial testing.| |The client application isn't permitted to request an authorization code.||This error usually occurs when the client application isn't registered in Azure AD or isn't added to the user's Azure AD tenant. The application can prompt the user with instruction for installing the application and adding it to Azure AD.| |Resource owner denied consent||The client application can notify the user that it can't continue unless the user consents.| |The authorization server doesn't support the response type in the request.||Fix and resubmit the request. This error is a development error typically caught during initial testing. In the hybrid flow, this error signals that you must enable the ID token implicit grant setting on the client app registration.| |The server encountered an unexpected error.||Retry the request. These errors can result from temporary conditions. The client application might explain to the user that its response is delayed to a temporary error.| |The server is temporarily too busy to handle the request.||Retry the request. The client application might explain to the user that its response is delayed because of a temporary condition.| |The target resource is invalid because it does not exist, Azure AD can't find it, or it's not correctly configured.||This error indicates the resource, if it exists, hasn't been configured in the tenant. The application can prompt the user with instruction for installing the application and adding it to Azure AD.| |Too many or no users found.||The client requested silent authentication ( | |The request requires user interaction.||Another authentication step or consent is required. Retry the request without | Request an ID token as well or hybrid flow To learn who the user is before redeeming an authorization code, it's common for applications to also request an ID token when they request the authorization code. This approach is called the hybrid flow because it mixes the implicit grant with the authorization code flow. The hybrid flow is commonly used in web apps to render a page for a user without blocking on code redemption, notably in ASP.NET. Both single-page apps and traditional web apps benefit from reduced latency in this model. The hybrid flow is the same as the authorization code flow described earlier but with three additions. All of these additions are required to request an ID token: new scopes, a new response_type, and a new nonce query parameter. // Line breaks for legibility only https://login.microsoftonline.com/{tenant}/oauth2/v2.0/authorize? client_id=6731de76-14a6-49ae-97bc-6eba6914391e &response_type=code%20id_token &redirect_uri=http%3A%2F%2Flocalhost%2Fmyapp%2F &response_mode=fragment &scope=openid%20offline_access%20https%3A%2F%2Fgraph.microsoft.com%2Fuser.read &state=12345 &nonce=abcde &code_challenge=YTFjNjI1OWYzMzA3MTI4ZDY2Njg5M2RkNmVjNDE5YmEyZGRhOGYyM2IzNjdmZWFhMTQ1ODg3NDcxY2Nl &code_challenge_method=S256 |Updated Parameter||Required/optional||Description| |required||The addition of | |required||For ID tokens, this parameter must be updated to include the ID token scopes: | |required||A value included in the request, generated by the app, that is included in the resulting | |recommended||Specifies the method that should be used to send the resulting token back to your app. Default value is | The use of fragment as a response mode causes issues for web apps that read the code from the redirect. Browsers don't pass the fragment to the web server. In these situations, apps should use the form_post response mode to ensure that all data is sent to the server. Successful response This example shows a successful response using response_mode=fragment: GET https://login.microsoftonline.com/common/oauth2/nativeclient# code=AwABAAAAvPM1KaPlrEqdFSBzjqfTGBCmLdgfSTLEMPGYuNHSUYBrq... &id_token=eYj... &state=12345 |Parameter||Description| |The authorization code that the app requested. The app can use the authorization code to request an access token for the target resource. Authorization codes are short lived, typically expiring after about 10 minutes.| |An ID token for the user, issued by using the implicit grant. Contains a special | |If a | Redeem a code for an access token All confidential clients have a choice of using client secrets or certificate credentials. Symmetric shared secrets are generated by the Microsoft identity platform. Certificate credentials are asymmetric keys uploaded by the developer. For more information, see Microsoft identity platform application authentication certificate credentials. For best security, we recommend using certificate credentials. Public clients, which include native applications and single page apps, must not use secrets or certificates when redeeming an authorization code. Always ensure that your redirect URIs include the type of application and are unique. Request an access token with a client_secret Now that you've acquired an authorization_code and have been granted permission by the user, you can redeem the code for an access_token to the resource. Redeem the code by sending a POST request to the /token endpoint: // Line breaks for legibility only POST /{tenant}/oauth2/v2.0/token HTTP/1.1 Host: https://login.microsoftonline.com Content-Type: application/x-www-form-urlencoded client_id=6731de76-14a6-49ae-97bc-6eba6914391e &scope=https%3A%2F%2Fgraph.microsoft.com%2Fmail.read &code=OAAABAAAAiL9Kn2Z27UubvWFPbm0gLWQJVzCTE9UkP3pSx1aXxUjq3n8b2JRLk4OxVXr... &redirect_uri=http%3A%2F%2Flocalhost%2Fmyapp%2F &grant_type=authorization_code &code_verifier=ThisIsntRandomButItNeedsToBe43CharactersLong &client_secret=JqQX2PNo9bpM0uEihUPzyrh // NOTE: Only required for web apps. This secret needs to be URL-Encoded. |Parameter||Required/optional||Description| |required||The | |required||The Application (client) ID that the Azure portal â€“ App registrations page assigned to your app.| |optional||A space-separated list of scopes. The scopes must all be from a single resource, along with OIDC scopes ( | |required||The | |required||The same | |required||Must be | |recommended||The same | |required for confidential web apps||The application secret that you created in the app registration portal for your app. Don't use the application secret in a native app or single page app because a | Request an access token with a certificate credential POST /{tenant}/oauth2/v2.0/token HTTP/1.1 // Line breaks for clarity Host: login.microsoftonline.com Content-Type: application/x-www-form-urlencoded client_id=6731de76-14a6-49ae-97bc-6eba6914391e &scope=https%3A%2F%2Fgraph.microsoft.com%2Fmail.read &code=OAAABAAAAiL9Kn2Z27UubvWFPbm0gLWQJVzCTE9UkP3pSx1aXxUjq3n8b2JRLk4OxVXr... &redirect_uri=http%3A%2F%2Flocalhost%2Fmyapp%2F &grant_type=authorization_code &code_verifier=ThisIsntRandomButItNeedsToBe43CharactersLong &client_assertion_type=urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer &client_assertion=eyJhbGciOiJSUzI1NiIsIng1dCI6Imd4OHRHeXN5amNScUtqRlBuZDdSRnd2d1pJMCJ9.eyJ{a lot of characters here}M8U3bSUKKJDEg |Parameter||Required/optional||Description| |required||The | |required||The Application (client) ID that the Azure portal â€“ App registrations page assigned to your app.| |optional||A space-separated list of scopes. The scopes must all be from a single resource, along with OIDC scopes ( | |required||The | |required||The same | |required||Must be | |recommended||The same | |required for confidential web apps||The value must be set to | |required for confidential web apps||An assertion, which is a JSON web token (JWT), that you need to create and sign with the certificate you registered as credentials for your application. Read about certificate credentials to learn how to register your certificate and the format of the assertion.| The parameters are same as the request by shared secret except that the client_secret parameter is replaced by two parameters: a client_assertion_type and client_assertion. Successful response This example shows a successful token response: { "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik5HVEZ2ZEstZnl0aEV1Q...", "token_type": "Bearer", "expires_in": 3599, "scope": "https%3A%2F%2Fgraph.microsoft.com%2Fmail.read", "refresh_token": "AwABAAAAvPM1KaPlrEqdFSBzjqfTGAMxZGUTdM0t4B4...", "id_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJhdWQiOiIyZDRkMTFhMi1mODE0LTQ2YTctOD...", } |Parameter||Description| |The requested access token. The app can use this token to authenticate to the secured resource, such as a web API.| |Indicates the token type value. The only type that Azure AD supports is | |How long the access token is valid, in seconds.| |The scopes that the | |An OAuth 2.0 refresh token. The app can use this token to acquire other access tokens after the current access token expires. Refresh tokens are long-lived. They can maintain access to resources for extended periods. For more detail on refreshing an access token, refer to Refresh the access token later in this article. | Note: Only provided if |A JSON Web Token. The app can decode the segments of this token to request information about the user who signed in. The app can cache the values and display them, and confidential clients can use this token for authorization. For more information about id_tokens, see the | Note: Only provided if Error response This example is an Error response: { "error": "invalid_scope", "error_description": "AADSTS70011: The provided value for the input parameter 'scope' is not valid. The scope https://foo.microsoft.com/mail.read is not valid.\r\nTrace ID: 255d1aef-8c98-452f-ac51-23d051240864\r\nCorrelation ID: fb3d2015-bc17-4bb9-bb85-30c5cf1aaaa7\r\nTimestamp: 2016-01-09 02:02:12Z", "error_codes": [ 70011 ], "timestamp": "2016-01-09 02:02:12Z", "trace_id": "255d1aef-8c98-452f-ac51-23d051240864", "correlation_id": "fb3d2015-bc17-4bb9-bb85-30c5cf1aaaa7" } |Parameter||Description| |An error code string that can be used to classify types of errors, and to react to errors.| |A specific error message that can help a developer identify the cause of an authentication error.| |A list of STS-specific error codes that can help in diagnostics.| |The time at which the error occurred.| |A unique identifier for the request that can help in diagnostics.| |A unique identifier for the request that can help in diagnostics across components.| Error codes for token endpoint errors |Error Code||Description||Client Action| |Protocol error, such as a missing required parameter.||Fix the request or app registration and resubmit the request.| |The authorization code or PKCE code verifier is invalid or has expired.||Try a new request to the | |The authenticated client isn't authorized to use this authorization grant type.||This error usually occurs when the client application isn't registered in Azure AD or isn't added to the user's Azure AD tenant. The application can prompt the user with instruction for installing the application and adding it to Azure AD.| |Client authentication failed.||The client credentials aren't valid. To fix, the application administrator updates the credentials.| |The authorization server doesn't support the authorization grant type.||Change the grant type in the request. This type of error should occur only during development and be detected during initial testing.| |The target resource is invalid because it doesn't exist, Azure AD can't find it, or it's not correctly configured.||This code indicates the resource, if it exists, hasn't been configured in the tenant. The application can prompt the user with instruction for installing the application and adding it to Azure AD.| |Non-standard, as the OIDC specification calls for this code only on the ||Retry the | |The server is temporarily too busy to handle the request.||Retry the request after a small delay. The client application might explain to the user that its response is delayed because of a temporary condition.| |The request requires user consent. This error is non-standard. It's usually only returned on the ||The client should send the user back to the | |The scope requested by the app is invalid.||Update the value of the | Note Single page apps may receive an invalid_request error indicating that cross-origin token redemption is permitted only for the 'Single-Page Application' client-type. This indicates that the redirect URI used to request the token has not been marked as a spa redirect URI. Review the application registration steps on how to enable this flow. Use the access token Now that you've successfully acquired an access_token, you can use the token in requests to web APIs by including it in the Authorization header: GET /v1.0/me/messages Host: https://graph.microsoft.com Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik5HVEZ2ZEstZnl0aEV1Q... Refresh the access token Access tokens are short lived. Refresh them after they expire to continue accessing resources. You can do so by submitting another POST request to the /token endpoint. Provide the refresh_token instead of the code. Refresh tokens are valid for all permissions that your client has already received consent for. For example, a refresh token issued on a request for scope=mail.read can be used to request a new access token for scope=api://contoso.com/api/UseResource. Refresh tokens for web apps and native apps don't have specified lifetimes. Typically, the lifetimes of refresh tokens are relatively long. However, in some cases, refresh tokens expire, are revoked, or lack sufficient privileges for the action. Your application needs to expect and handle errors returned by the token issuance endpoint. Single page apps get a token with a 24-hour lifetime, requiring a new authentication every day. This action can be done silently in an iframe when third-party cookies are enabled. It must be done in a top-level frame, either full page navigation or a pop-up window, in browsers without third-party cookies, such as Safari. Refresh tokens aren't revoked when used to acquire new access tokens. You're expected to discard the old refresh token. The OAuth 2.0 spec says: "The authorization server MAY issue a new refresh token, in which case the client MUST discard the old refresh token and replace it with the new refresh token. The authorization server MAY revoke the old refresh token after issuing a new refresh token to the client." Important For refresh tokens sent to a redirect URI registered as spa, the refresh token expires after 24 hours. Additional refresh tokens acquired using the initial refresh token carries over that expiration time, so apps must be prepared to re-run the authorization code flow using an interactive authentication to get a new refresh token every 24 hours. Users do not have to enter their credentials, and usually don't even see any user experience, just a reload of your application. The browser must visit the login page in a top level frame in order to see the login session. This is due to privacy features in browsers that block third party cookies. // Line breaks for legibility only POST /{tenant}/oauth2/v2.0/token HTTP/1.1 Host: https://login.microsoftonline.com Content-Type: application/x-www-form-urlencoded client_id=535fb089-9ff3-47b6-9bfb-4f1264799865 &scope=https%3A%2F%2Fgraph.microsoft.com%2Fmail.read &refresh_token=OAAABAAAAiL9Kn2Z27UubvWFPbm0gLWQJVzCTE9UkP3pSx1aXxUjq... &grant_type=refresh_token &client_secret=sampleCredentia1s // NOTE: Only required for web apps. This secret needs to be URL-Encoded |Parameter||Type||Description| |required||The | |required||The Application (client) ID that the Azure portal â€“ App registrations experience assigned to your app.| |required||Must be | |optional||A space-separated list of scopes. The scopes requested in this leg must be equivalent to or a subset of the scopes requested in the original | |required||The | |required for web apps||The application secret that you created in the app registration portal for your app. It shouldn't be used in a native app, because a | Successful response This example shows a successful token response: { "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik5HVEZ2ZEstZnl0aEV1Q...", "token_type": "Bearer", "expires_in": 3599, "scope": "https%3A%2F%2Fgraph.microsoft.com%2Fmail.read", "refresh_token": "AwABAAAAvPM1KaPlrEqdFSBzjqfTGAMxZGUTdM0t4B4...", "id_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJhdWQiOiIyZDRkMTFhMi1mODE0LTQ2YTctOD...", } |Parameter||Description| |The requested access token. The app can use this token to authenticate to the secured resource, such as a web API.| |Indicates the token type value. The only type that Azure AD supports is Bearer.| |How long the access token is valid, in seconds.| |The scopes that the | |A new OAuth 2.0 refresh token. Replace the old refresh token with this newly acquired refresh token to ensure your refresh tokens remain valid for as long as possible. | Note: Only provided if |An unsigned JSON Web Token. The app can decode the segments of this token to request information about the user who signed in. The app can cache the values and display them, but it shouldn't rely on them for any authorization or security boundaries. For more information about | Note: Only provided if Warning Don't attempt to validate or read tokens for any API you don't own, including the tokens in this example, in your code. Tokens for Microsoft services can use a special format that will not validate as a JWT, and may also be encrypted for consumer (Microsoft account) users. While reading tokens is a useful debugging and learning tool, do not take dependencies on this in your code or assume specifics about tokens that aren't for an API you control. Error response { "error": "invalid_scope", "error_description": "AADSTS70011: The provided value for the input parameter 'scope' is not valid. The scope https://foo.microsoft.com/mail.read is not valid.\r\nTrace ID: 255d1aef-8c98-452f-ac51-23d051240864\r\nCorrelation ID: fb3d2015-bc17-4bb9-bb85-30c5cf1aaaa7\r\nTimestamp: 2016-01-09 02:02:12Z", "error_codes": [ 70011 ], "timestamp": "2016-01-09 02:02:12Z", "trace_id": "255d1aef-8c98-452f-ac51-23d051240864", "correlation_id": "fb3d2015-bc17-4bb9-bb85-30c5cf1aaaa7" } |Parameter||Description| |An error code string that can be used to classify types of errors, and to react to errors.| |A specific error message that can help a developer identify the root cause of an authentication error.| |A list of STS-specific error codes that can help in diagnostics.| |The time at which the error occurred.| |A unique identifier for the request that can help in diagnostics.| |A unique identifier for the request that can help in diagnostics across components.| For a description of the error codes and the recommended client action, see Error codes for token endpoint errors. Next steps - Go over the MSAL JS samples to get started coding. - Learn about token exchange scenarios.