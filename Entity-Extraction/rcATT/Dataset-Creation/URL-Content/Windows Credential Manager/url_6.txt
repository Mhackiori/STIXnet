No magic behind: it uses the standard API CredEnumerate, with Flags at 0 then CRED_ENUMERATE_ALL_CREDENTIALS to try to get them all. Mixed with: vault::list, it's enough to get a lots of credentials for the current user (especially Web stuff). Problem CredentialBlob Secret data for the credential. The CredentialBlob member can be both read and written. If the Type member is CRED_TYPE_DOMAIN_PASSWORD, this member contains the plaintext Unicode password for UserName. The CredentialBlob and CredentialBlobSize members do not include a trailing zero character. Also, for CRED_TYPE_DOMAIN_PASSWORD, this member can only be read by the authentication packages. dwFlags : 20000000 - 536870912 (system ; ) this is the "bad" new... the DPAPI protected the blob with the CRYPTPROTECT_SYSTEM flag, preventing an unprivilegied process to decrypt the blob... (~= not you, only LSASS) guidMasterKey : {cc6eb538-28f1-4ab4-adf2-f5594e88f0b2} this is the GUID of the masterkey needed to decrypt the blob. LSASS has it in its cache, or will be able to load it on the fly when needed... Decrypt Naive approach Because of the system flag (protected by the signature of the blob - we can't alter it), LSASS will refuse to unprotect the blob for us... Decrypting Credential: * using CryptUnprotectData API ERROR kuhl_m_dpapi_unprotect_raw_or_blob ; CryptUnprotectData (0x0000000d) The masterkey Here, thanks to the previous GUID we know that the masterkey is located in: %appdata%\Microsoft\Protect\<usersid>\cc6eb538-28f1-4ab4-adf2-f5594e88f0b2 As this cc6eb538-28f1-4ab4-adf2-f5594e88f0b2 master key belongs to the current user, we can certainly use it with the /rpc argument: mimikatz # dpapi::masterkey /in:"%appdata%\Microsoft\Protect\S-1-5-21-1719172562-3308538836-3929312420-1104\cc6eb538-28f1-4ab4-adf2-f5594e88f0b2" /rpc **MASTERKEYS** dwVersion : 00000002 - 2 szGuid : {cc6eb538-28f1-4ab4-adf2-f5594e88f0b2} [...] [domainkey] with RPC [DC] 'lab.local' will be the domain [DC] 'dc.lab.local' will be the DC server key : 3ed054e284b5d47796f4779a2c0de63ca0ea9c63ce9e3f6868e2dd4f1113f6f3c55d9c1e21d2378c4499f98c0682991647dfd5f60b4f05034163ff59651e4ad4 sha1: 81c99543dea591c11f20d69027ea2016d89d07dd So sweet ! the domain controller has decrypted it for us, and mimikatz has placed it in its cache: Nearly nothing... the ability to decrypt its own masterkeys by RPC is by protocol/design... and is needed when using smartcard or when loosing passwords. But, storing domain credentials in the credential manager is a bad practice... even Microsoft recommend to disable it... (but in the name of legacy, will enable it by default) Best practices It is a recommended practice to disable the ability of the Windows operating system to cache credentials on any computer where credentials are not needed. Evaluate your servers and workstations to determine the requirements. Cached credentials are designed primarily to be used on laptops that require domain credentials when disconnected from the domain.