Program Download |Program Download| |Technique| |ID||T0843| |Tactic||Lateral Movement| |Data Sources||Network Traffic: Network Traffic Content, Application Log: Application Log Content, Operational Databases: Device Alarm| |Asset||Field Controller/RTU/PLC/IED, Safety Instrumented System/Protection Relay| Description Adversaries may perform a program download to transfer a user program to a controller. Variations of program download, such as online edit and program append, allow a controller to continue running during the transfer and reconfiguration process without interruption to process control. However, before starting a full program download (i.e., download all) a controller may need to go into a stop state. This can have negative consequences on the physical process, especially if the controller is not able to fulfill a time-sensitive action. Adversaries may choose to avoid a download all in favor of an online edit or program append to avoid disrupting the physical process. An adversary may need to use the technique Detect Operating Mode or Change Operating Mode to make sure the controller is in the proper mode to accept a program download. The granularity of control to transfer a user program in whole or parts is dictated by the management protocol (e.g., S7CommPlus, TriStation) and underlying controller API. Thus, program download is a high-level term for the suite of vendor-specific API calls used to configure a controller’s user program memory space. Modify Controller Tasking and Modify Program represent the configuration changes that are transferred to a controller via a program download. Procedure Examples - PLC-Blaster utilizes the PLC communication and management API to load executable Program Organization Units.1 - Stuxnet's infection sequence consists of code blocks and data blocks that will be downloaded to the PLC to alter its behavior.2 - Triton leveraged the TriStation protocol to download programs onto Triconex Safety Instrumented System.3 Mitigations - Authorization Enforcement - All field controllers should restrict the modification of programs to only certain users (e.g., engineers, field technician), preferably through implementing a role-based access mechanism. - Human User Authentication - All field controllers should require users to authenticate for all remote or local management sessions. The authentication mechanisms should also support Account Use Policies, Password Policies, and User Account Management. - Communication Authenticity - Protocols used for device management should authenticate all network messages to prevent unauthorized system changes. - Network Allowlists - Use host-based allowlists to prevent devices from accepting connections from unauthorized systems. For example, allowlists can be used to ensure devices can only connect with master stations or known management/engineering workstations.4 - Access Management - Authenticate all access to field controllers before authorizing access to, or modification of, a device's state, logic, or programs. Centralized authentication techniques can help manage the large number of field controller accounts needed across the ICS. - Software Process and Device Authentication - Authenticate connections from software and devices to prevent unauthorized systems from accessing protected management functions. - Code Signing - Utilize code signatures to verify the integrity of the installed program on safety or control assets has not been changed. - Network Segmentation - Segment operational network and systems to restrict access to critical system functions to predetermined management systems.4 - Filter Network Traffic - Filter for protocols and payloads associated with program download activity to prevent unauthorized device configurations. - Audit - Provide the ability to verify the integrity of control logic or programs loaded on a controller. While techniques like CRCs and checksums are commonly used, they are not cryptographically strong and can be vulnerable to collisions. Preferably cryptographic hash functions (e.g., SHA-2, SHA-3) should be used.5 References - ^ Spenneberg, Ralf, Maik Brüggemann, and Hendrik Schwartke. (2016, March 31). Plc-blaster: A worm living solely in the plc.. Retrieved September 19, 2017. - ^ Nicolas Falliere, Liam O Murchu, Eric Chien. (2011, February). W32.Stuxnet Dossier (Version 1.4). Retrieved September 22, 2017. - ^ Jos Wetzels. (2018, January 16). Analyzing the TRITON industrial malware. Retrieved October 22, 2019. - a b Department of Homeland Security. (2016, September). Retrieved September 25, 2020. - ^ IEC. (2019, February). Security for industrial automation and control systems - Part 4-2: Technical security requirements for IACS components. Retrieved September 25, 2020.