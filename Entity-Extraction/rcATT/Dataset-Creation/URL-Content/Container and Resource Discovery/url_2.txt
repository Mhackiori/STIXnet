The Kubernetes API The core of Kubernetes' control plane is the API server. The API server exposes an HTTP API that lets end users, different parts of your cluster, and external components communicate with one another. The Kubernetes API lets you query and manipulate the state of API objects in Kubernetes (for example: Pods, Namespaces, ConfigMaps, and Events). Most operations can be performed through the kubectl command-line interface or other command-line tools, such as kubeadm, which in turn use the API. However, you can also access the API directly using REST calls. Consider using one of the client libraries if you are writing an application using the Kubernetes API. OpenAPI specification Complete API details are documented using OpenAPI. OpenAPI V2 The Kubernetes API server serves an aggregated OpenAPI v2 spec via the /openapi/v2 endpoint. You can request the response format using request headers as follows: |Header||Possible values||Notes| |not supplying this header is also acceptable| |mainly for intra-cluster use| |default| |serves | Kubernetes implements an alternative Protobuf based serialization format that is primarily intended for intra-cluster communication. For more information about this format, see the Kubernetes Protobuf serialization design proposal and the Interface Definition Language (IDL) files for each schema located in the Go packages that define the API objects. OpenAPI V3 Kubernetes v1.23 [alpha] Kubernetes v1.23 offers initial support for publishing its APIs as OpenAPI v3; this is an alpha feature that is disabled by default. You can enable the alpha feature by turning on the feature gate named OpenAPIV3 for the kube-apiserver component. With the feature enabled, the Kubernetes API server serves an aggregated OpenAPI v3 spec per Kubernetes group version at the /openapi/v3/apis/<group>/<version> endpoint. Please refer to the table below for accepted request headers. |Header||Possible values||Notes| |not supplying this header is also acceptable| |mainly for intra-cluster use| |default| |serves | A discovery endpoint /openapi/v3 is provided to see a list of all group/versions available. This endpoint only returns JSON. Persistence Kubernetes stores the serialized state of objects by writing them into etcd. API groups and versioning To make it easier to eliminate fields or restructure resource representations, Kubernetes supports multiple API versions, each at a different API path, such as /api/v1 or /apis/rbac.authorization.k8s.io/v1alpha1. Versioning is done at the API level rather than at the resource or field level to ensure that the API presents a clear, consistent view of system resources and behavior, and to enable controlling access to end-of-life and/or experimental APIs. To make it easier to evolve and to extend its API, Kubernetes implements API groups that can be enabled or disabled. API resources are distinguished by their API group, resource type, namespace (for namespaced resources), and name. The API server handles the conversion between API versions transparently: all the different versions are actually representations of the same persisted data. The API server may serve the same underlying data through multiple API versions. For example, suppose there are two API versions, v1 and v1beta1, for the same resource. If you originally created an object using the v1beta1 version of its API, you can later read, update, or delete that object using either the v1beta1 or the v1 API version. API changes Any system that is successful needs to grow and change as new use cases emerge or existing ones change. Therefore, Kubernetes has designed the Kubernetes API to continuously change and grow. The Kubernetes project aims to not break compatibility with existing clients, and to maintain that compatibility for a length of time so that other projects have an opportunity to adapt. In general, new API resources and new resource fields can be added often and frequently. Elimination of resources or fields requires following the API deprecation policy. Kubernetes makes a strong commitment to maintain compatibility for official Kubernetes APIs once they reach general availability (GA), typically at API version v1. Additionally, Kubernetes keeps compatibility even for beta API versions wherever feasible: if you adopt a beta API you can continue to interact with your cluster using that API, even after the feature goes stable. Refer to API versions reference for more details on the API version level definitions. API Extension The Kubernetes API can be extended in one of two ways: - Custom resources let you declaratively define how the API server should provide your chosen resource API. - You can also extend the Kubernetes API by implementing an aggregation layer. What's next - Learn how to extend the Kubernetes API by adding your own CustomResourceDefinition. - Controlling Access To The Kubernetes API describes how the cluster manages authentication and authorization for API access. - Learn about API endpoints, resource types and samples by reading API Reference. - Learn about what constitutes a compatible change, and how to change the API, from API changes.